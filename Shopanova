{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d7ac403e-3d90-49ec-b0fa-ef55c6efe99d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Salem alem\n"
     ]
    }
   ],
   "source": [
    "print (\"Salem alem\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3635d4fe-7275-4e28-8ebc-d28109289f7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "print(5*5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "068c8037-1d59-4adc-b422-43e445ea5bdf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.0\n"
     ]
    }
   ],
   "source": [
    "print(25/5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "813a80ab-6a47-434d-9b6a-ec3ce12837dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "san= 5\n",
    "if (san>5):\n",
    "    print('5 ten ulken')\n",
    "elif( san ==5 ):\n",
    "     print  \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "778a6f10-cda0-4acd-a54d-0b82a739f407",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 5\n",
      " 7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "user_input = int(input())\n",
    "user_input2 = int(input())\n",
    "print(user_input + user_input2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2c369c8d-be1c-4148-bdf2-f96a68b4554e",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "incomplete input (2539570851.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[10], line 5\u001b[1;36m\u001b[0m\n\u001b[1;33m    \u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m incomplete input\n"
     ]
    }
   ],
   "source": [
    "korrzina = []\n",
    "korzina.append(1)\n",
    "korzina.appent(2)\n",
    "print(korzina[::]\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3f327612-1cf8-49a8-a579-6f1e1d1143a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "введите число;  5\n",
      "введите число;  5\n",
      "введите число;  10\n",
      "введите число;  5\n",
      "введите число;  10\n",
      "введите число;  5\n",
      "введите число;  5\n",
      "введите число;  5\n",
      "введите число;  5\n",
      "введите число;  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5, 5, 10, 5, 10, 5, 5, 5, 5, 5]\n"
     ]
    }
   ],
   "source": [
    "list = []\n",
    "x=0\n",
    "while x< 10:\n",
    "    list.append(int(input(\"введите число; \")))\n",
    "    x+=1\n",
    "print(list)\n",
    "\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a66c2e2c-a393-4880-bb88-9ea88d7045f1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
